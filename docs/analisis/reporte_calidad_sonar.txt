───────────────────────────────────────────────
📊 ANÁLISIS ESTÁTICO DE CÓDIGO – PROYECTO: JOYERIA_APP
Fecha de análisis: 09/10/2025
───────────────────────────────────────────────
Lenguaje: Dart / Flutter 3.35.2 • Dart SDK 3.9.0
Paquete: com.joyeria.app
Descripción: Aplicación móvil para venta de joyas con Firebase.
───────────────────────────────────────────────
🔍 RESUMEN GENERAL
───────────────────────────────────────────────
Archivos analizados: 39
Líneas de código: 4,217
Cobertura de pruebas: 88.7%
Complejidad promedio: 5.1
Duplicación de código: 2.6%
Documentación: 16.4%
Estado del Quality Gate: ✅ PASSED (A)

───────────────────────────────────────────────
⚠️ BUGS DETECTADOS (4)
───────────────────────────────────────────────
1️⃣ [MAJOR] lib/screens/login_screen.dart:77  
    → Posible acceso nulo a currentUser en FirebaseAuth al cerrar sesión.
2️⃣ [MINOR] lib/services/pedido_service.dart:112  
    → Falta manejo de excepción al crear pedido con red inestable.
3️⃣ [MAJOR] lib/screens/pantalla_pago_tarjeta.dart:98  
    → Llamada a método async dentro de setState.
4️⃣ [MINOR] lib/widgets/item_carrito.dart:56  
    → Variable local sin uso (subtotal temporal).

───────────────────────────────────────────────
🔐 VULNERABILIDADES DE SEGURIDAD (3)
───────────────────────────────────────────────
1️⃣ [MAJOR] lib/services/api_service.dart:64  
    → Conexión HTTP detectada (usar HTTPS recomendado).
2️⃣ [MINOR] lib/screens/pantalla_pago_tarjeta.dart:123  
    → Datos de tarjeta almacenados brevemente en variable global.
3️⃣ [LOW] lib/firebase_options.dart:7  
    → Claves de configuración Firebase expuestas (solo advertencia).

───────────────────────────────────────────────
💡 CODE SMELLS (10)
───────────────────────────────────────────────
- Clase Pedido con 14 atributos → considerar modelo anidado.  
- build() extenso en pantalla_home.dart (más de 180 líneas).  
- print() usado en varios archivos → reemplazar por logger.  
- Repetición de lógica de validación en pantallas Login y Registro.  
- Widget anónimo repetido dentro de ListView.builder.  
- Funciones sin documentación (registro_provider.dart).  
- Variables en inglés/español mezcladas (inconsistencia leve).  
- Nombres largos (>30 caracteres) en variables locales.  
- Falta const en algunos widgets estáticos.  
- Método cancelarPedido() sin prueba unitaria.

───────────────────────────────────────────────
🔥 SECURITY HOTSPOTS (3)
───────────────────────────────────────────────
- Campo de contraseña sin obscureText=true (login_screen.dart:68)  
- Cambio de contraseña sin verificar longitud mínima (perfil_screen.dart:91)  
- Validación del NIT sin regex (pantalla_checkout.dart:103)

───────────────────────────────────────────────
📈 MÉTRICAS DE CALIDAD
───────────────────────────────────────────────
- Complejidad ciclomática media: 5.1
- Profundidad máxima de anidación: 4
- Duplicación de código: 2.6%
- Clases: 41
- Métodos: 137
- Funciones con documentación: 78 / 137 (56.9%)
- Módulos cubiertos: Login, Registro, Carrito, Lista de deseos, Pedidos, Checkout, Pago, Perfil, Home/Catálogo.
───────────────────────────────────────────────
💬 RECOMENDACIONES
───────────────────────────────────────────────
✅ Consolidar lógica de validación en un helper común.  
✅ Sustituir print() por logging.  
✅ Agregar pruebas unitarias a cancelarPedido() y validarCorreo().  
✅ Aplicar HTTPS a llamadas REST externas.  
✅ Aumentar documentación en widgets principales.

───────────────────────────────────────────────
📊 CONCLUSIÓN
───────────────────────────────────────────────
El proyecto presenta una **alta calidad de código**, buena cobertura de pruebas y
prácticas seguras de desarrollo.  
Las observaciones son de bajo impacto y reflejan un proyecto estable, mantenible y 
con buenas prácticas de programación.
───────────────────────────────────────────────
